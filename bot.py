import os
import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import json
from datetime import datetime, timedelta
import math
from openpyxl import load_workbook
import asyncio
from flask import Flask
from threading import Thread
import time

# Replit keep-alive server
app = Flask('')

@app.route('/')
def home():
    return "üöÄ Telegram Stair Bot is Alive and Running!"

@app.route('/ping')
def ping():
    return "PONG"

@app.route('/status')
def status():
    return {
        "status": "active",
        "timestamp": datetime.now().isoformat(),
        "service": "telegram-stair-bot"
    }

def run_flask():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    t = Thread(target=run_flask)
    t.daemon = True
    t.start()
    logging.info("üîÑ Keep-alive server started on port 8080")

def start_ping_loop():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Å–∞–º–æ-–ø–∏–Ω–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    def ping_loop():
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º URL Replit –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
                repl_url = os.getenv('REPLIT_URL')
                if repl_url:
                    requests.get(f"{repl_url}/ping", timeout=10)
                    logging.debug("üîÅ Self-ping completed")
            except Exception as e:
                logging.debug(f"üîÅ Self-ping failed: {e}")
            time.sleep(300)  # –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    
    t = Thread(target=ping_loop)
    t.daemon = True
    t.start()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECTING_TYPE, SELECTING_CONFIG, INPUT_HEIGHT, SELECTING_STEP_SIZE, SEARCH_MATERIAL = range(5)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_data = {}
prices_data = None
last_price_update = None
PRICE_UPDATE_INTERVAL = timedelta(hours=24)
MESSAGES_TO_DELETE = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ä–∞—Å—á–µ—Ç–∞
FIXED_STEP_HEIGHT = 225
MAX_STRINGER_LENGTH = 4000

def load_prices(force_update=False):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω –∏–∑ Excel —Ñ–∞–π–ª–∞ —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
    global prices_data, last_price_update
    
    try:
        current_time = datetime.now()
        if force_update or last_price_update is None or (current_time - last_price_update) > PRICE_UPDATE_INTERVAL:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω...")
            
            wb = load_workbook('data.xlsx', data_only=True)
            sheet = wb.active
            
            prices = []
            
            for row_num in range(4, sheet.max_row + 1):
                article = sheet.cell(row=row_num, column=1).value
                name = sheet.cell(row=row_num, column=2).value
                stair_type = sheet.cell(row=row_num, column=3).value
                sizes = sheet.cell(row=row_num, column=4).value
                unit = sheet.cell(row=row_num, column=5).value
                price = sheet.cell(row=row_num, column=6).value
                
                if article and name and price:
                    item = {
                        'article': str(article).split('.')[0] if '.' in str(article) else str(article),
                        'name': str(name),
                        'stair_type': str(stair_type) if stair_type else '',
                        'sizes': str(sizes) if sizes else '',
                        'unit': str(unit) if unit else '—à—Ç.',
                        'price': float(price) if price else 0
                    }
                    prices.append(item)
            
            prices_data = prices
            last_price_update = current_time
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(prices)} –ø–æ–∑–∏—Ü–∏–π –∏–∑ Excel")
        else:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–π—Å–∞: {e}")
        prices_data = get_test_data()

def get_test_data():
    """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"""
    test_data = [
        {'article': '15762294', 'name': '–í–µ—Ä—Ö–Ω–∏–π –∏ –Ω–∏–∂–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–ª—å –õ–≠-01-01', 'stair_type': '–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è', 'price': 7590, 'unit': '—à—Ç—É–∫–∞'},
        {'article': '15762307', 'name': '–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–ª—å –õ–≠-01-02', 'stair_type': '–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è', 'price': 4076, 'unit': '—à—Ç—É–∫–∞'},
        {'article': '15762374', 'name': '–û–ø–æ—Ä–∞ –ª–µ—Å—Ç–Ω–∏—Ü—ã 1000–º–º —Å—Ç–∞–ª—å –õ–≠-01-09', 'stair_type': '–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è', 'price': 3647, 'unit': '—à—Ç—É–∫–∞'},
        {'article': '15762382', 'name': '–û–ø–æ—Ä–∞ –ª–µ—Å—Ç–Ω–∏—Ü—ã 2000 —Å—Ç–∞–ª—å –õ–≠-01-10', 'stair_type': '–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è', 'price': 5490, 'unit': '—à—Ç—É–∫–∞'},
        {'article': '15762391', 'name': '–£–≥–ª–æ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–ª—å –õ–≠-01-14', 'stair_type': '–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è', 'price': 12411, 'unit': '—à—Ç—É–∫–∞'},
        {'article': '83850952', 'name': '–°–¢–£–ü–ï–ù–¨ –ü–†–Ø–ú–ê–Ø 900x300', 'stair_type': '–¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è', 'price': 1504, 'unit': '—à—Ç—É–∫–∞'},
        {'article': '83850953', 'name': '–°–¢–£–ü–ï–ù–¨ –ü–†–Ø–ú–ê–Ø 1000x300', 'stair_type': '–¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è', 'price': 1282, 'unit': '—à—Ç—É–∫–∞'},
        {'article': '83850954', 'name': '–°–¢–£–ü–ï–ù–¨ –ü–†–Ø–ú–ê–Ø 1200x300', 'stair_type': '–¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è', 'price': 1358, 'unit': '—à—Ç—É–∫–∞'},
        {'article': '83850961', 'name': '–¢–µ—Ç–∏–≤–∞ 3000x300x60', 'stair_type': '–¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è', 'price': 9518, 'unit': '—à—Ç—É–∫–∞'},
        {'article': '83850962', 'name': '–¢–µ—Ç–∏–≤–∞ 4000x300x60', 'stair_type': '–¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è', 'price': 10215, 'unit': '—à—Ç—É–∫–∞'},
        {'article': '83850939', 'name': '–ü–æ—Ä—É—á–µ–Ω—å 3000–º–º', 'stair_type': '–¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è', 'price': 2108, 'unit': '—à—Ç—É–∫–∞'},
        {'article': '89426866', 'name': '–°—Ç–æ–ª–± –•—é–≥–≥–µ', 'stair_type': '–¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è', 'price': 1931, 'unit': '—à—Ç—É–∫–∞'},
        {'article': '89426868', 'name': '–ë–∞–ª—è—Å–∏–Ω–∞ –•—é–≥–≥–µ', 'stair_type': '–¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è', 'price': 400, 'unit': '—à—Ç—É–∫–∞'},
        {'article': 'platform_1000', 'name': '–ü–ª–æ—â–∞–¥–∫–∞ 1000x1000', 'stair_type': '–¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è', 'price': 8000, 'unit': '—à—Ç—É–∫–∞'},
        {'article': 'platform_1200', 'name': '–ü–ª–æ—â–∞–¥–∫–∞ 1200x1200', 'stair_type': '–¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è', 'price': 9500, 'unit': '—à—Ç—É–∫–∞'},
    ]
    logger.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    return test_data

def get_material_price(material_type, name_pattern, default_price):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø—É –ª–µ—Å—Ç–Ω–∏—Ü—ã"""
    if not prices_data:
        return default_price
    
    try:
        for item in prices_data:
            if (item['stair_type'] == material_type and 
                name_pattern.lower() in item['name'].lower()):
                return item['price']
        return default_price
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω—ã: {e}")
        return default_price

def get_material_by_article(article):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É"""
    if not prices_data:
        return None
    
    try:
        clean_article = str(article).split('.')[0] if '.' in str(article) else str(article)
        for item in prices_data:
            if item['article'] == clean_article:
                return item
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É {article}: {e}")
        return None

def search_materials_by_article_or_name(search_term):
    """–ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    if not prices_data:
        return []
    
    try:
        search_term = search_term.lower().strip()
        results = []
        
        for item in prices_data:
            if (search_term in item['article'].lower() or 
                search_term in item['name'].lower()):
                results.append(item)
        
        return results
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {e}")
        return []

def validate_input(value, min_val, max_val, field_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å"""
    try:
        num = float(value)
        if min_val <= num <= max_val:
            return True, num
        else:
            return False, f"‚ùå {field_name} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {min_val} –¥–æ {max_val} –º–º"
    except ValueError:
        return False, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"

async def add_message_to_delete(chat_id, message_id):
    """–î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if chat_id not in MESSAGES_TO_DELETE:
        MESSAGES_TO_DELETE[chat_id] = []
    MESSAGES_TO_DELETE[chat_id].append(message_id)
    
    if len(MESSAGES_TO_DELETE[chat_id]) > 50:
        MESSAGES_TO_DELETE[chat_id] = MESSAGES_TO_DELETE[chat_id][-50:]

async def cleanup_chat_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    try:
        chat_id = update.effective_chat.id
        
        if chat_id in MESSAGES_TO_DELETE:
            for message_id in MESSAGES_TO_DELETE[chat_id]:
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
            
            MESSAGES_TO_DELETE[chat_id] = []
            
        logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")

async def send_message_with_cleanup(update: Update, context: ContextTypes.DEFAULT_TYPE, text, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    message = await update.message.reply_text(text, **kwargs)
    await add_message_to_delete(update.effective_chat.id, message.message_id)
    return message

def optimize_stringers(stringer_length):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å–∫—Ä–æ—è —Ç–µ—Ç–∏–≤—ã –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –æ—Ç—Ö–æ–¥–æ–≤"""
    total_stringer_qty = 2
    
    if stringer_length <= 3000:
        return [{'length': 3000, 'qty': total_stringer_qty}], total_stringer_qty
    
    elif stringer_length <= 4000:
        return [{'length': 4000, 'qty': total_stringer_qty}], total_stringer_qty
    
    else:
        qty_4000 = math.ceil(stringer_length / 4000) * total_stringer_qty
        waste_4000 = (qty_4000 * 4000) - (stringer_length * total_stringer_qty)
        
        qty_4000_combo = math.floor(stringer_length / 4000) * total_stringer_qty
        remaining_length = (stringer_length * total_stringer_qty) - (qty_4000_combo * 4000)
        qty_3000_combo = math.ceil(remaining_length / 3000) if remaining_length > 0 else 0
        waste_combo = (qty_4000_combo * 4000 + qty_3000_combo * 3000) - (stringer_length * total_stringer_qty)
        
        if waste_4000 <= waste_combo:
            return [{'length': 4000, 'qty': qty_4000}], qty_4000
        else:
            result = []
            if qty_4000_combo > 0:
                result.append({'length': 4000, 'qty': qty_4000_combo})
            if qty_3000_combo > 0:
                result.append({'length': 3000, 'qty': qty_3000_combo})
            return result, qty_4000_combo + qty_3000_combo

def calculate_wood_stairs(height, steps_count, config, material_type, actual_step_height, step_width):
    """–†–∞—Å—á–µ—Ç –¥–µ—Ä–µ–≤—è–Ω–Ω–æ–π –ª–µ—Å—Ç–Ω–∏—Ü—ã —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π —Å—Ç—É–ø–µ–Ω–∏ 225 –º–º"""
    materials = []
    total_cost = 0
    
    steps_count = math.ceil(height / FIXED_STEP_HEIGHT)
    actual_step_height = height / steps_count
    
    platforms_count = 0
    if config == 'l_shape':
        platforms_count = 1
        steps_count = max(1, steps_count - 1)
    elif config == 'u_shape':
        platforms_count = 2
        steps_count = max(1, steps_count - 2)
    
    step_depth = 300
    
    if config == 'straight':
        stair_length = (steps_count - 1) * step_depth
        stringer_length = math.sqrt(height**2 + stair_length**2)
        total_stringer_length = stringer_length * 2
        
    elif config == 'l_shape':
        first_flight_steps = math.ceil(steps_count / 2)
        second_flight_steps = steps_count - first_flight_steps
        
        first_flight_height = first_flight_steps * actual_step_height
        second_flight_height = second_flight_steps * actual_step_height
        
        first_flight_length = (first_flight_steps - 1) * step_depth
        second_flight_length = (second_flight_steps - 1) * step_depth
        
        first_stringer_length = math.sqrt(first_flight_height**2 + first_flight_length**2)
        second_stringer_length = math.sqrt(second_flight_height**2 + second_flight_length**2)
        
        total_stringer_length = (first_stringer_length + second_stringer_length) * 2
        
    else:
        flights_steps = math.ceil(steps_count / 3)
        remaining_steps = steps_count - flights_steps * 2
        if remaining_steps < 0:
            flights_steps = math.ceil(steps_count / 2)
            remaining_steps = steps_count - flights_steps
        
        flight_height = flights_steps * actual_step_height
        flight_length = (flights_steps - 1) * step_depth
        
        flight_stringer_length = math.sqrt(flight_height**2 + flight_length**2)
        total_stringer_length = flight_stringer_length * 4
    
    stringers_optimized, total_stringer_qty = optimize_stringers(total_stringer_length / 2)
    
    for stringer in stringers_optimized:
        stringer_price = get_material_price(material_type, f'–¢–µ—Ç–∏–≤–∞ {stringer["length"]}', 10215 if stringer["length"] == 4000 else 9518)
        stringer_cost = stringer_price * stringer["qty"]
        
        materials.append({
            'name': f'–¢–µ—Ç–∏–≤–∞ {stringer["length"]}–º–º',
            'qty': stringer["qty"],
            'unit': '—à—Ç.',
            'price': stringer_price,
            'total': stringer_cost
        })
        total_cost += stringer_cost
    
    step_price = get_material_price(material_type, f'–°–¢–£–ü–ï–ù–¨ –ü–†–Ø–ú–ê–Ø {step_width}', 1500)
    step_cost = steps_count * step_price
    
    materials.append({
        'name': f'–°—Ç—É–ø–µ–Ω—å {step_width}√ó300–º–º',
        'qty': steps_count,
        'unit': '—à—Ç.',
        'price': step_price,
        'total': step_cost
    })
    total_cost += step_cost
    
    riser_price = get_material_price(material_type, f'–ü–æ–¥—Å—Ç—É–ø–µ–Ω–æ–∫ {step_width}', 600)
    riser_cost = steps_count * riser_price
    
    materials.append({
        'name': f'–ü–æ–¥—Å—Ç—É–ø–µ–Ω–æ–∫ {step_width}√ó200–º–º',
        'qty': steps_count,
        'unit': '—à—Ç.',
        'price': riser_price,
        'total': riser_cost
    })
    total_cost += riser_cost
    
    if platforms_count > 0:
        platform_size = 1000 if step_width in ["900", "1000"] else 1200
        platform_price = get_material_price(material_type, f'–ü–ª–æ—â–∞–¥–∫–∞ {platform_size}', 8000 if platform_size == 1000 else 9500)
        platform_cost = platforms_count * platform_price
        
        materials.append({
            'name': f'–ü–ª–æ—â–∞–¥–∫–∞ {platform_size}√ó{platform_size}–º–º',
            'qty': platforms_count,
            'unit': '—à—Ç.',
            'price': platform_price,
            'total': platform_cost
        })
        total_cost += platform_cost
    
    post_price = get_material_price(material_type, '–°—Ç–æ–ª–±', 1931)
    if config == 'straight':
        posts_qty = 2
    elif config == 'l_shape':
        posts_qty = 3
    else:
        posts_qty = 4
    
    posts_cost = posts_qty * post_price
    
    materials.append({
        'name': '–°—Ç–æ–ª–± –æ–ø–æ—Ä–Ω—ã–π',
        'qty': posts_qty,
        'unit': '—à—Ç.',
        'price': post_price,
        'total': posts_cost
    })
    total_cost += posts_cost
    
    baluster_price = get_material_price(material_type, '–ë–∞–ª—è—Å–∏–Ω–∞', 400)
    balusters_qty = steps_count + platforms_count
    balusters_cost = balusters_qty * baluster_price
    
    materials.append({
        'name': '–ë–∞–ª—è—Å–∏–Ω–∞',
        'qty': balusters_qty,
        'unit': '—à—Ç.',
        'price': baluster_price,
        'total': balusters_cost
    })
    total_cost += balusters_cost
    
    handrail_length = total_stringer_length / 2
    handrail_qty = math.ceil(handrail_length / 3000)
    handrail_price = get_material_price(material_type, '–ü–û–†–£–ß–ï–ù–¨', 2108)
    handrail_cost = handrail_qty * handrail_price
    
    materials.append({
        'name': '–ü–æ—Ä—É—á–µ–Ω—å 3000–º–º',
        'qty': handrail_qty,
        'unit': '—à—Ç.',
        'price': handrail_price,
        'total': handrail_cost
    })
    total_cost += handrail_cost
    
    return {
        'type': 'wood',
        'config': config,
        'height': height,
        'step_width': step_width,
        'steps_count': steps_count,
        'platforms_count': platforms_count,
        'step_height': actual_step_height,
        'stringer_length': total_stringer_length / 2,
        'stringer_qty': total_stringer_qty,
        'stringers_detail': stringers_optimized,
        'posts_count': posts_qty,
        'materials': materials,
        'total_cost': total_cost
    }

def calculate_modular_stairs(height, steps_count, config, material_type, actual_step_height, step_width):
    """–†–∞—Å—á–µ—Ç –º–æ–¥—É–ª—å–Ω–æ–π –ª–µ—Å—Ç–Ω–∏—Ü—ã —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π —Å—Ç—É–ø–µ–Ω–∏ 225 –º–º"""
    materials = []
    total_cost = 0
    
    steps_count = math.ceil(height / FIXED_STEP_HEIGHT)
    actual_step_height = height / steps_count
    
    platforms_count = 0
    if config == 'l_shape':
        platforms_count = 1
        steps_count = max(1, steps_count - 1)
    elif config == 'u_shape':
        platforms_count = 2
        steps_count = max(1, steps_count - 2)
    
    support_1000 = get_material_by_article('15762374')
    support_2000 = get_material_by_article('15762382')
    
    if support_1000:
        materials.append({
            'name': support_1000['name'],
            'qty': 1,
            'unit': '—à—Ç.',
            'price': support_1000['price'],
            'total': support_1000['price']
        })
        total_cost += support_1000['price']
    
    if support_2000:
        materials.append({
            'name': support_2000['name'],
            'qty': 1,
            'unit': '—à—Ç.',
            'price': support_2000['price'],
            'total': support_2000['price']
        })
        total_cost += support_2000['price']
    
    module_price = get_material_price(material_type, '–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç', 4076)
    modules_qty = steps_count - 1
    modules_cost = modules_qty * module_price
    
    materials.append({
        'name': '–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç',
        'qty': modules_qty,
        'unit': '—à—Ç.',
        'price': module_price,
        'total': modules_cost
    })
    total_cost += modules_cost
    
    end_module_price = get_material_price(material_type, '–í–µ—Ä—Ö–Ω–∏–π –∏ –Ω–∏–∂–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç', 7590)
    materials.append({
        'name': '–í–µ—Ä—Ö–Ω–∏–π –∏ –Ω–∏–∂–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç',
        'qty': 1,
        'unit': '—à—Ç.',
        'price': end_module_price,
        'total': end_module_price
    })
    total_cost += end_module_price
    
    corner_element = get_material_by_article('15762391')
    if corner_element:
        if config == 'l_shape':
            materials.append({
                'name': corner_element['name'],
                'qty': 1,
                'unit': '—à—Ç.',
                'price': corner_element['price'],
                'total': corner_element['price']
            })
            total_cost += corner_element['price']
        elif config == 'u_shape':
            materials.append({
                'name': corner_element['name'],
                'qty': 2,
                'unit': '—à—Ç.',
                'price': corner_element['price'],
                'total': corner_element['price'] * 2
            })
            total_cost += corner_element['price'] * 2
    
    if platforms_count > 0:
        platform_price = get_material_price(material_type, '–ü–ª–æ—â–∞–¥–∫–∞', 8000)
        materials.append({
            'name': f'–ü–ª–æ—â–∞–¥–∫–∞ {step_width}x{step_width}',
            'qty': platforms_count,
            'unit': '—à—Ç.',
            'price': platform_price,
            'total': platform_price * platforms_count
        })
        total_cost += platform_price * platforms_count
    
    step_price = get_material_price(material_type, f'–°–¢–£–ü–ï–ù–¨ –ü–†–Ø–ú–ê–Ø {step_width}', 1500)
    step_cost = steps_count * step_price
    
    materials.append({
        'name': f'–°—Ç—É–ø–µ–Ω—å {step_width}√ó300–º–º',
        'qty': steps_count,
        'unit': '—à—Ç.',
        'price': step_price,
        'total': step_cost
    })
    total_cost += step_cost
    
    railing_price = get_material_price(material_type, '–û–ø–æ—Ä–∞ –ø–æ–¥ –ø–æ—Ä—É—á–µ–Ω—å', 900)
    railing_qty = steps_count + platforms_count
    railing_cost = railing_qty * railing_price
    
    materials.append({
        'name': '–û–ø–æ—Ä–∞ –ø–æ–¥ –ø–æ—Ä—É—á–µ–Ω—å',
        'qty': railing_qty,
        'unit': '—à—Ç.',
        'price': railing_price,
        'total': railing_cost
    })
    total_cost += railing_cost
    
    handrail_length = math.sqrt(height**2 + (steps_count * 300)**2) / 1000
    handrail_qty = math.ceil(handrail_length / 3)
    handrail_price = get_material_price(material_type, '–ü–û–†–£–ß–ï–ù–¨', 2108)
    handrail_cost = handrail_qty * handrail_price
    
    materials.append({
        'name': '–ü–æ—Ä—É—á–µ–Ω—å 3000–º–º',
        'qty': handrail_qty,
        'unit': '—à—Ç.',
        'price': handrail_price,
        'total': handrail_cost
    })
    total_cost += handrail_cost
    
    return {
        'type': 'modular',
        'config': config,
        'height': height,
        'step_width': step_width,
        'steps_count': steps_count,
        'platforms_count': platforms_count,
        'step_height': actual_step_height,
        'stringer_length': handrail_length,
        'materials': materials,
        'total_cost': total_cost
    }

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await cleanup_chat_history(update, context)
    
    if prices_data is None:
        load_prices()
    
    user = update.effective_user
    welcome_text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n"
        "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–∞—Å—á–µ—Ç–µ –ª–µ—Å—Ç–Ω–∏—Ü.\n\n"
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
        "‚Ä¢ üè† *–†–∞—Å—á–µ—Ç –ª–µ—Å—Ç–Ω–∏—Ü—ã* - –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏\n"
        "‚Ä¢ üîç *–ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞* - –Ω–∞–π—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ª–µ—Å—Ç–Ω–∏—Ü—É", callback_data="calculate_stairs")],
        [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="search_material")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    await add_message_to_delete(update.effective_chat.id, message.message_id)

async def restart_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    if chat_id in MESSAGES_TO_DELETE:
        for message_id in MESSAGES_TO_DELETE[chat_id]:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
        MESSAGES_TO_DELETE[chat_id] = []
    
    user = query.from_user
    user_id = user.id
    if user_id in user_data:
        del user_data[user_id]
    
    welcome_text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n"
        "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–∞—Å—á–µ—Ç–µ –ª–µ—Å—Ç–Ω–∏—Ü.\n\n"
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
        "‚Ä¢ üè† *–†–∞—Å—á–µ—Ç –ª–µ—Å—Ç–Ω–∏—Ü—ã* - –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏\n"
        "‚Ä¢ üîç *–ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞* - –Ω–∞–π—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ª–µ—Å—Ç–Ω–∏—Ü—É", callback_data="calculate_stairs")],
        [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="search_material")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "calculate_stairs":
        await cleanup_chat_history(update, context)
        
        user_id = query.from_user.id
        if user_id not in user_data:
            user_data[user_id] = {}
        
        reply_keyboard = [
            ["üè† –î–µ—Ä–µ–≤—è–Ω–Ω–∞—è", "‚ö° –ú–æ–¥—É–ª—å–Ω–∞—è"],
            ["üîç –ù–∞–π—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]
        ]
        
        message = await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                 "üìã *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–µ—Å—Ç–Ω–∏—Ü—ã:*\n"
                 "‚Ä¢ üè† *–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è* - –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n"
                 "‚Ä¢ ‚ö° *–ú–æ–¥—É–ª—å–Ω–∞—è* - –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
            parse_mode='Markdown'
        )
        await add_message_to_delete(query.message.chat_id, message.message_id)
        return SELECTING_TYPE
    
    elif query.data == "search_material":
        await cleanup_chat_history(update, context)
        
        reply_keyboard = [["üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]]
        
        message = await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="üîç *–ü–û–ò–°–ö –ú–ê–¢–ï–†–ò–ê–õ–ê*\n\n"
                 "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n"
                 "–ü—Ä–∏–º–µ—Ä—ã:\n"
                 "‚Ä¢ `15762294` - –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É\n"
                 "‚Ä¢ `–°—Ç—É–ø–µ–Ω—å` - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
                 "‚Ä¢ `–¢–µ—Ç–∏–≤–∞` - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
            parse_mode='Markdown'
        )
        await add_message_to_delete(query.message.chat_id, message.message_id)
        return SEARCH_MATERIAL
    
    elif query.data == "restart":
        await restart_bot(update, context)

async def search_material(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    search_term = update.message.text
    user_id = update.effective_user.id
    
    await add_message_to_delete(update.effective_chat.id, update.message.message_id)
    
    if search_term == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        await restart_from_message(update, context)
        return ConversationHandler.END
    
    if not search_term.strip():
        await send_message_with_cleanup(update, context, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞")
        return SEARCH_MATERIAL
    
    search_msg = await send_message_with_cleanup(update, context, "üîç –ò—â—É –º–∞—Ç–µ—Ä–∏–∞–ª—ã...")
    
    results = search_materials_by_article_or_name(search_term)
    
    try:
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=search_msg.message_id)
    except:
        pass
    
    if not results:
        await send_message_with_cleanup(
            update, context,
            f"‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞—Ä—Ç–∏–∫—É–ª–∞\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ –£–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å"
        )
        return SEARCH_MATERIAL
    
    message_text = f"üîç *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê* ('{search_term}')\n\n"
    
    for i, item in enumerate(results[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        message_text += (
            f"*{i}. {item['name']}*\n"
            f"üìã –ê—Ä—Ç–∏–∫—É–ª: `{item['article']}`\n"
            f"üè∑ –¢–∏–ø: {item['stair_type']}\n"
            f"üìè –†–∞–∑–º–µ—Ä—ã: {item.get('sizes', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã')}\n"
            f"üí∞ –¶–µ–Ω–∞: {item['price']:,.0f} ‚ÇΩ\n"
            f"üì¶ –ï–¥. –∏–∑–º.: {item['unit']}\n\n"
        )
    
    if len(results) > 10:
        message_text += f"*... –∏ –µ—â–µ {len(results) - 10} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤*"
    
    message_text += "\n_–î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ_"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_material")],
        [InlineKeyboardButton("üè† –†–∞—Å—á–µ—Ç –ª–µ—Å—Ç–Ω–∏—Ü—ã", callback_data="calculate_stairs")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    await add_message_to_delete(update.effective_chat.id, message.message_id)
    
    return ConversationHandler.END

async def select_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –ª–µ—Å—Ç–Ω–∏—Ü—ã"""
    user_choice = update.message.text
    user_id = update.effective_user.id
    
    await add_message_to_delete(update.effective_chat.id, update.message.message_id)
    
    if user_choice == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        await restart_from_message(update, context)
        return ConversationHandler.END
    
    if user_choice == "üîç –ù–∞–π—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª":
        await cleanup_chat_history(update, context)
        
        reply_keyboard = [["üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]]
        
        await send_message_with_cleanup(
            update, context,
            "üîç *–ü–û–ò–°–ö –ú–ê–¢–ï–†–ò–ê–õ–ê*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `15762294` - –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É\n"
            "‚Ä¢ `–°—Ç—É–ø–µ–Ω—å` - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
            "‚Ä¢ `–¢–µ—Ç–∏–≤–∞` - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
            parse_mode='Markdown'
        )
        return SEARCH_MATERIAL
    
    user_data[user_id] = {
        'type': 'wood' if '–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è' in user_choice else 'modular',
        'material_type': '–¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è' if '–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è' in user_choice else '–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è'
    }
    
    reply_keyboard = [
        ["üìè –ü—Ä—è–º–∞—è", "üìê –ì-–æ–±—Ä–∞–∑–Ω–∞—è", "üîÑ –ü-–æ–±—Ä–∞–∑–Ω–∞—è"],
        ["üîç –ù–∞–π—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]
    ]
    
    await send_message_with_cleanup(
        update, context,
        "üìê *–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–µ—Å—Ç–Ω–∏—Ü—ã:*\n\n"
        "‚Ä¢ üìè *–ü—Ä—è–º–∞—è* - –æ–¥–Ω–æ–º–∞—Ä—à–µ–≤–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞\n"
        "‚Ä¢ üìê *–ì-–æ–±—Ä–∞–∑–Ω–∞—è* - —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –Ω–∞ 90¬∞\n" 
        "‚Ä¢ üîÑ *–ü-–æ–±—Ä–∞–∑–Ω–∞—è* - —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –Ω–∞ 180¬∞",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
        parse_mode='Markdown'
    )
    return SELECTING_CONFIG

async def select_config(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–µ—Å—Ç–Ω–∏—Ü—ã"""
    user_choice = update.message.text
    user_id = update.effective_user.id
    
    await add_message_to_delete(update.effective_chat.id, update.message.message_id)
    
    if user_choice == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        await restart_from_message(update, context)
        return ConversationHandler.END
    
    if user_choice == "üîç –ù–∞–π—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª":
        await cleanup_chat_history(update, context)
        
        reply_keyboard = [["üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]]
        
        await send_message_with_cleanup(
            update, context,
            "üîç *–ü–û–ò–°–ö –ú–ê–¢–ï–†–ò–ê–õ–ê*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `15762294` - –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É\n"
            "‚Ä¢ `–°—Ç—É–ø–µ–Ω—å` - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
            "‚Ä¢ `–¢–µ—Ç–∏–≤–∞` - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
            parse_mode='Markdown'
        )
        return SEARCH_MATERIAL
    
    config_map = {
        'üìè –ü—Ä—è–º–∞—è': 'straight',
        'üìê –ì-–æ–±—Ä–∞–∑–Ω–∞—è': 'l_shape', 
        'üîÑ –ü-–æ–±—Ä–∞–∑–Ω–∞—è': 'u_shape'
    }
    
    user_data[user_id]['config'] = config_map[user_choice]
    
    reply_keyboard = [["üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]]
    
    await send_message_with_cleanup(
        update, context,
        "üìè *–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –ª–µ—Å—Ç–Ω–∏—Ü—ã (–º–º):*\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ 2700 - –¥–ª—è –≤—ã—Å–æ—Ç—ã 2.7 –º–µ—Ç—Ä–∞\n" 
        "‚Ä¢ 3000 - –¥–ª—è –≤—ã—Å–æ—Ç—ã 3 –º–µ—Ç—Ä–∞\n"
        "‚Ä¢ 3500 - –¥–ª—è –≤—ã—Å–æ—Ç—ã 3.5 –º–µ—Ç—Ä–∞\n\n"
        "üìù *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* –í—ã—Å–æ—Ç–∞ –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –æ—Ç —á–∏—Å—Ç–æ–≥–æ –ø–æ–ª–∞ –Ω–∏–∂–Ω–µ–≥–æ —ç—Ç–∞–∂–∞ –¥–æ —á–∏—Å—Ç–æ–≥–æ –ø–æ–ª–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ —ç—Ç–∞–∂–∞",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
        parse_mode='Markdown'
    )
    return INPUT_HEIGHT

async def input_height(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–≤–æ–¥ –≤—ã—Å–æ—Ç—ã –ª–µ—Å—Ç–Ω–∏—Ü—ã"""
    height_input = update.message.text
    user_id = update.effective_user.id
    
    await add_message_to_delete(update.effective_chat.id, update.message.message_id)
    
    if height_input == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        await restart_from_message(update, context)
        return INPUT_HEIGHT
    
    is_valid, result = validate_input(height_input, 1000, 5000, "–í—ã—Å–æ—Ç–∞ –ª–µ—Å—Ç–Ω–∏—Ü—ã")
    
    if not is_valid:
        await send_message_with_cleanup(update, context, result)
        return INPUT_HEIGHT
    
    user_data[user_id]['height'] = result
    
    reply_keyboard = [
        ["900", "1000", "1200"],
        ["üîç –ù–∞–π—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]
    ]
    
    await send_message_with_cleanup(
        update, context,
        "üìê *–í—ã–±–µ—Ä–∏—Ç–µ —à–∏—Ä–∏–Ω—É —Å—Ç—É–ø–µ–Ω–∏:*\n\n"
        "‚Ä¢ 900 –º–º - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
        "‚Ä¢ 1000 –º–º - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —à–∏—Ä–∏–Ω–∞\n"
        "‚Ä¢ 1200 –º–º - –ø—Ä–æ—Å—Ç–æ—Ä–Ω–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
        parse_mode='Markdown'
    )
    return SELECTING_STEP_SIZE

async def select_step_size(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç—É–ø–µ–Ω–∏"""
    step_width = update.message.text
    user_id = update.effective_user.id
    
    await add_message_to_delete(update.effective_chat.id, update.message.message_id)
    
    if step_width == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        await restart_from_message(update, context)
        return ConversationHandler.END
    
    if step_width == "üîç –ù–∞–π—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª":
        await cleanup_chat_history(update, context)
        
        reply_keyboard = [["üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]]
        
        await send_message_with_cleanup(
            update, context,
            "üîç *–ü–û–ò–°–ö –ú–ê–¢–ï–†–ò–ê–õ–ê*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `15762294` - –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É\n"
            "‚Ä¢ `–°—Ç—É–ø–µ–Ω—å` - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
            "‚Ä¢ `–¢–µ—Ç–∏–≤–∞` - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
            parse_mode='Markdown'
        )
        return SEARCH_MATERIAL
    
    if step_width not in ["900", "1000", "1200"]:
        await send_message_with_cleanup(update, context, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —à–∏—Ä–∏–Ω—É —Å—Ç—É–ø–µ–Ω–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return SELECTING_STEP_SIZE
    
    user_data[user_id]['step_width'] = step_width
    
    calculation_msg = await send_message_with_cleanup(update, context, "üßÆ *–í—ã–ø–æ–ª–Ω—è—é —Ä–∞—Å—á–µ—Ç...*", parse_mode='Markdown')
    
    user_input = user_data[user_id]
    
    try:
        if user_input['type'] == 'wood':
            result = calculate_wood_stairs(
                height=user_input['height'],
                steps_count=0,
                config=user_input['config'],
                material_type=user_input['material_type'],
                actual_step_height=FIXED_STEP_HEIGHT,
                step_width=user_input['step_width']
            )
        else:
            result = calculate_modular_stairs(
                height=user_input['height'],
                steps_count=0,
                config=user_input['config'],
                material_type=user_input['material_type'],
                actual_step_height=FIXED_STEP_HEIGHT,
                step_width=user_input['step_width']
            )
        
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=calculation_msg.message_id)
        
        config_names = {
            'straight': '–ü—Ä—è–º–∞—è',
            'l_shape': '–ì-–æ–±—Ä–∞–∑–Ω–∞—è', 
            'u_shape': '–ü-–æ–±—Ä–∞–∑–Ω–∞—è'
        }
        
        type_names = {
            'wood': '–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è',
            'modular': '–ú–æ–¥—É–ª—å–Ω–∞—è'
        }
        
        result_text = (
            f"üìä *–†–ï–ó–£–õ–¨–¢–ê–¢ –†–ê–°–ß–ï–¢–ê*\n\n"
            f"üè∑ *–¢–∏–ø:* {type_names[result['type']]}\n"
            f"üìê *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:* {config_names[result['config']]}\n"
            f"üìè *–í—ã—Å–æ—Ç–∞:* {result['height']:,} –º–º\n"
            f"üìê *–®–∏—Ä–∏–Ω–∞ —Å—Ç—É–ø–µ–Ω–∏:* {result['step_width']} –º–º\n"
            f"ü™ú *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–ø–µ–Ω–µ–π:* {result['steps_count']}\n"
            f"üìè *–í—ã—Å–æ—Ç–∞ —Å—Ç—É–ø–µ–Ω–∏:* {result['step_height']:.1f} –º–º\n"
        )
        
        if result['type'] == 'wood':
            result_text += f"üìè *–î–ª–∏–Ω–∞ —Ç–µ—Ç–∏–≤—ã:* {result['stringer_length']:.0f} –º–º\n"
            result_text += f"üî¢ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Ç–∏–≤:* {result['stringer_qty']} —à—Ç\n"
        
        if result['platforms_count'] > 0:
            result_text += f"üü¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–æ—â–∞–¥–æ–∫:* {result['platforms_count']}\n"
        
        result_text += f"\nüì¶ *–ú–ê–¢–ï–†–ò–ê–õ–´:*\n"
        
        for material in result['materials']:
            result_text += f"‚Ä¢ {material['name']}: {material['qty']} {material['unit']} √ó {material['price']:,.0f} ‚ÇΩ = {material['total']:,.0f} ‚ÇΩ\n"
        
        result_text += f"\nüí∞ *–û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨:* {result['total_cost']:,.0f} ‚ÇΩ\n\n"
        result_text += "_*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –°—Ç–æ–∏–º–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∞ –±–µ–∑ —É—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –º–æ–Ω—Ç–∞–∂–∞_\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="calculate_stairs")],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞", callback_data="search_material")],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = await update.message.reply_text(result_text, reply_markup=reply_markup, parse_mode='Markdown')
        await add_message_to_delete(update.effective_chat.id, message.message_id)
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=calculation_msg.message_id)
        await send_message_with_cleanup(update, context, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: {str(e)}")
        return ConversationHandler.END

async def restart_from_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
    await cleanup_chat_history(update, context)
    
    user_id = update.effective_user.id
    if user_id in user_data:
        del user_data[user_id]
    
    user = update.effective_user
    welcome_text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n"
        "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–∞—Å—á–µ—Ç–µ –ª–µ—Å—Ç–Ω–∏—Ü.\n\n"
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
        "‚Ä¢ üè† *–†–∞—Å—á–µ—Ç –ª–µ—Å—Ç–Ω–∏—Ü—ã* - –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏\n"
        "‚Ä¢ üîç *–ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞* - –Ω–∞–π—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ª–µ—Å—Ç–Ω–∏—Ü—É", callback_data="calculate_stairs")],
        [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="search_material")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    await add_message_to_delete(update.effective_chat.id, message.message_id)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await cleanup_chat_history(update, context)
    
    user_id = update.effective_user.id
    if user_id in user_data:
        del user_data[user_id]
    
    await send_message_with_cleanup(update, context, "–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.")
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
    
    try:
        await send_message_with_cleanup(update, context, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
    except:
        pass

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive —Å–µ—Ä–≤–µ—Ä –¥–ª—è Replit
    keep_alive()
    logger.info("üîÑ Keep-alive server started on port 8080")
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ-–ø–∏–Ω–≥ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # start_ping_loop()
    # logger.info("üîÅ Self-ping service started")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    load_prices()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Secrets")
        logger.info("üìù –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ —Ä–∞–∑–¥–µ–ª Secrets (Tools ‚Üí Secrets)")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            CallbackQueryHandler(button_handler, pattern='^(calculate_stairs|search_material)$')
        ],
        states={
            SELECTING_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_type)],
            SELECTING_CONFIG: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_config)],
            INPUT_HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_height)],
            SELECTING_STEP_SIZE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_step_size)],
            SEARCH_MATERIAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_material)],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            CommandHandler('start', start),
            CallbackQueryHandler(restart_bot, pattern='^restart$'),
            CallbackQueryHandler(button_handler, pattern='^(calculate_stairs|search_material)$')
        ],
        allow_reentry=True
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(restart_bot, pattern='^restart$'))
    application.add_error_handler(error_handler)
    
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("üì° Keep-alive —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8080")
    logger.info("üîó URL –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: https://your-repl-name.your-username.repl.co")
    
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()
